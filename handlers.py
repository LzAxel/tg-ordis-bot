import aiogram
from aiogram import types, filters, Dispatcher
from aiogram.utils.markdown import hlink, bold
import json
from pathlib import Path

import parse
from bot import dp, bot
import keyboards as kb
import config


async def process_start_command(msg: types.Message):
    await msg.reply("ü§ñ –ü—Ä–∏–≤–µ—Ç, –Ø - –û—Ä–¥–∏—Å, –±–æ—Ç - –∏–Ω—Ñ–æ—Ä–º–∞—Ç–æ—Ä –∏–≤–µ–Ω—Ç–æ–≤ Warframe'a \n\n"
                    "üîî –í–æ—Ç —Å–ø–∏—Å–æ–∫ –º–æ–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: \n\n"
                    " - –Ø –±—É–¥—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ —Å –æ—Ñ. —Å–∞–π—Ç–∞ \n"
                    " - –ú–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –¥—Ä–æ–ø —Å –ª—é–±–æ–π —Ä–µ–ª–∏–∫–≤–∏–∏ \n"
                    " - –û—Ç–∫—É–¥–∞ –≤—ã–ø–∞–¥–∞—é—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∞–π–º —á–∞—Å—Ç–∏ \n"
                    " - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â—É—é –≤—ã–ª–∞–∑–∫—É –∏ —Å—Ç–∞—Ç—É—Å—ã –æ—Ç–∫—Ä—ã—Ç—ã—Ö –º–∏—Ä–æ–≤ \n\n"
                    "‚Åâ –í—Å–µ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –ø–æ –∫–æ–º–∞–Ω–¥–µ /help", parse_mode="Markdown",
                    reply_markup=kb.mainMenu)

    chat_id = str(msg.chat.id)
    with open('chats.txt', 'r', encoding='UTF-8') as file:
        chat_id_list = file.readline()
        if chat_id not in chat_id_list:
            with open('chats.txt', 'a', encoding='UTF-8') as write_file:
                write_file.write(chat_id)
                write_file.write('\n')
        else:
            print('–≠—Ç–æ—Ç –∞–π–¥–∏ —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ')


async def process_help_command(msg: types.Message):
    await msg.reply("‚Åâ –ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –±–æ—Ç–∞ \n\n"
                    "- /latest - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–æ–≤–æ—Å—Ç—å —Å –æ—Ñ. —Å–∞–π—Ç–∞ \n"
                    "- üåó–¶–∏–∫–ª—ã - —É–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö –º–∏—Ä–æ–≤ \n"
                    "- üõ°–í—ã–ª–∞–∑–∫–∞ - —É–∑–Ω–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤—ã–ª–∞–∑–∫–∏, –≤–∫–ª—é—á–∞—è –º–∏—Å—Å–∏–∏ –∏ –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è \n\n"
                    "- –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥—Ä–æ–ø —Å —Ä–µ–ª–∏–∫–≤–∏–∏ - {–≠—Ä–∞} {–ù–∞–∑–≤–∞–Ω–∏–µ} {–£–ª—É—á—à–µ–Ω–∏–µ –æ—Ç 0 –¥–æ 3 (–Ω–µ –æ–±—è–∑.)}\n"
                    "_–ù–∞–ø—Ä–∏–º–µ—Ä:_ *–õ–∏—Ç k7* –∏–ª–∏ *lith k7*\n\n"
                    "- –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å –∫–∞–∫–∏—Ö —Ä–µ–ª–∏–∫–≤–∏–π –ø–∞–¥–∞–µ—Ç —á–∞—Å—Ç—å - {–ù–∞–∑–≤–∞–Ω–∏–µ}\n"
                    "_–ù–∞–ø—Ä–∏–º–µ—Ä:_ *–†–∏–Ω–æ –ü—Ä–∞–π–º* –∏–ª–∏ *Rhino Prime*\n\n"
                    "- –ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —á–∞—Å—Ç–∏ - {–ù–∞–∑–≤–∞–Ω–∏–µ} –ü—Ä–∞–π–º {–ß–∞—Å—Ç—å}\n"
                    "_–ù–∞–ø—Ä–∏–º–µ—Ä:_ *–†–∏–Ω–æ –ü—Ä–∞–π–º –ß–µ—Ä—Ç—ë–∂* –∏–ª–∏ *Rhino Prime Blueprint*\n\n"
                    "üìå *–í–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:* –ù–µ –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫, –ø–æ—ç—Ç–æ–º—É,\n"
                    "–µ—Å–ª–∏ –±–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç - —Ç–æ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º\n"
                    "–í –±—É–¥—É—â–µ–º –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã –±—É–¥—É—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã"
                    , parse_mode="Markdown", reply_markup=kb.mainMenu)


async def send_latest_article(msg: types.Message):
    await parse.get_articles()
    with open(Path("src", "articles.json"), 'r', encoding='UTF-8') as file:
        article = json.load(file)[0]
    try:
        await bot.send_photo(msg.from_user.id, article['Photo'])

    except:
        print('–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –Ω–µ —É–¥–∞–ª–∞—Å—å')
    link = hlink('Read More', article['Read_More'])
    message = f"‚ú® <b>{article['Title']}</b> ‚ú®\n\nüìÉ {article['Description']}\n\nüìÖ {article['Date']}\t{link}"
    await bot.send_message(msg.from_user.id, message, parse_mode="HTML", disable_web_page_preview=True,
                           reply_markup=kb.mainMenu)


async def send_articles(msg: types.Message):
    await parse.get_articles()
    with open(Path("src", "articles.json"), 'r', encoding='UTF-8') as file:
        articles = json.load(file)

    for article in articles:
        try:
            await bot.send_photo(msg.from_user.id, article['Photo'])

        except:
            print('–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –Ω–µ —É–¥–∞–ª–∞—Å—å')
        message = f"‚ú® <b>{article['Title']}</b> ‚ú®\n\nüìÉ {article['Description']}\n\nüìÖ {article['Read_More']}\n{article['Date']}"
        await bot.send_message(msg.from_user.id, message, parse_mode="HTML", disable_web_page_preview=True,
                               reply_markup=kb.mainMenu)


async def send_world_cycles(msg: types.Message):
    print('–í—ã–≤–æ–¥ —Ü–∏–∫–ª–æ–≤')
    message = ""
    cycle_list = await parse.get_cycles()
    
    for cycle in cycle_list:
        message += f"{cycle.name}\n{bold('Status:')} {cycle.state}\n{bold('Time left:')} {cycle.eta}\n\n"
    await bot.send_message(msg.from_user.id, message, parse_mode='Markdown', reply_markup=kb.mainMenu)


async def send_sortie_info(msg: types.Message):
    print('–í—ã–≤–æ–¥ –≤—ã–ª–∞–∑–∫–∏')
    sortie = await parse.get_sortie()
    message = f"üé≠ *Faction:* {sortie.faction}\n\n" \
    f"‚ò†Ô∏è *Boss:* {sortie.boss}\n\n" \
    f"‚è± *Time left:* {sortie.eta}\n\n"
    
    for num, mission in enumerate(sortie.missions):
        message += f"*{num + 1} Mission* - {mission.mission_type} - {mission.location}\n*Modifier:* {mission.modifier}\n"
        message += f"*Modifier Description:* {mission.description}\n\n"
        
    await msg.answer(message, parse_mode='Markdown', reply_markup=kb.mainMenu)


async def send_invasions_info(msg: types.Message):
    print('–í—ã–≤–æ–¥ –≤—Ç–æ—Ä–∂–µ–Ω–∏–π')
    invasions = parse.get_invasions()
    message = "*‚öîÔ∏è Invasions*\n\n"
    for invasion in invasions:
        message += f"*Mission:* {invasion.location}\n*Defender*: {invasion.defender.faction} | *Reward*: {invasion.defender.reward.name}\n"
        message += f"*Attacker*: {invasion.attacker.faction} | *Reward*: {invasion.attacker.reward.name}\n"
        message += f"‚è±*Time Left:* {invasion.eta}\n\n"

    await msg.answer(message, parse_mode='Markdown', reply_markup=kb.mainMenu)


async def send_relic_info(msg: types.Message):
    print('–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–ª–∏–∫–∞ –∏–ª–∏ –¥—Ä–æ–ø–∞ –≤—ã–∑–≤–∞–Ω–æ')
    command = msg.text.lower()
    split_command = command.split(' ')
    if split_command[0] in config.RELIC_COMMANDS:
        message = await parse.get_relic_data(split_command)
        if message:
            await bot.send_message(msg.from_user.id, message, parse_mode='Markdown', reply_markup=kb.mainMenu)
        else:
            await bot.send_message(msg.from_user.id, "‚ùó Relic doesn't exist.",
                                   reply_markup=kb.mainMenu)
    else:
        message = await parse.get_relics_with_current_item(command)
        try:
            if message:
                await bot.send_message(msg.from_user.id, message, parse_mode='Markdown', reply_markup=kb.mainMenu)
            else:
                await bot.send_message(msg.from_user.id, "‚ùó Item doesn't exist.",
                                       reply_markup=kb.mainMenu)
        except aiogram.utils.exceptions.MessageIsTooLong:
            await bot.send_message(msg.from_user.id, "‚ùó Too big request. Input specific items.",
                                   reply_markup=kb.mainMenu)


def register_handlers(dp: Dispatcher): 
    dp.register_message_handler(process_start_command, commands=['start'])
    dp.register_message_handler(process_help_command, commands=['help'])
    dp.register_message_handler(send_latest_article, commands=['latest'])
    dp.register_message_handler(send_articles, commands=['list'])
    dp.register_message_handler(send_world_cycles, filters.Text("üåó World Cycles"))
    dp.register_message_handler(send_sortie_info, filters.Text("üõ° Sortie"))
    dp.register_message_handler(send_invasions_info, filters.Text("‚öîÔ∏è Invasions"))
    dp.register_message_handler(send_relic_info)