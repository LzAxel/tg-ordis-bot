import random
import csv
import json
import time

import aiogram.utils.exceptions
from bs4 import BeautifulSoup
import requests
import lxml

from aiogram import Bot, types, filters
from aiogram.dispatcher import Dispatcher
from aiogram.dispatcher.filters import Command
from aiogram.utils import executor
from aiogram.utils.markdown import hlink, bold
import asyncio
from pathlib import Path

import config
from parse import get_articles, get_relic_data, get_cycles, get_sortie, get_relic_names_list, get_relics_with_current_item, read_cached_json, get_alerts
from utils import reformat_time
import keyboards as kb


cwd = Path(__file__).parent

relic_names = []

bot = Bot(token=config.TOKEN)
dp = Dispatcher(bot)


async def check_new_alerts():
    saved_alerts = []
    with open(fr'{cwd}\chats.txt', 'r', encoding='UTF-8') as file:
        chats = file.readlines()
    while True:
        print('–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –°–∏–≥–Ω–∞–ª–æ–≤ –¢—Ä–µ–≤–æ–≥–∏... - ', time.strftime("%d/%m/%Y %H:%M:%S"))
        get_alerts()
        alerts = read_cached_json('alerts')
        if not saved_alerts:
            saved_alerts = alerts
            print('–ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ - ', time.strftime("%d/%m/%Y %H:%M:%S"))
        elif all(alert in saved_alerts for alert in alerts):
            print("–ù–æ–≤—ã—Ö —Ç—Ä–µ–≤–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ - ", time.strftime("%d/%m/%Y %H:%M:%S"))
        else:
            print("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–æ–≤—ã–µ —Ç—Ä–µ–≤–æ–≥–∏ - ", time.strftime("%d/%m/%Y %H:%M:%S"))
            for chat in chats:
                message = "‚ùï*–ù–æ–≤—ã–µ –°–∏–≥–Ω–∞–ª—ã –¢—Ä–µ–≤–æ–≥–∏*\n\n"
                for alert in alerts:
                    if alert not in saved_alerts:
                        message += f"*–¢–∏–ø:* {alert['description']}\n*–ú–∏—Å—Å–∏—è*: {alert['mission']}\n*–§—Ä–∞–∫—Ü–∏—è*: {alert['faction']}\n"
                        message += f"*–ù–∞–≥—Ä–∞–¥–∞*: {alert['reward']}\n"
                        print('–æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–µ–≤–æ–≥–∏ –∫ ', chat)
                        await bot.send_message(chat, message, parse_mode='Markdown',
                                               reply_markup=kb.mainMenu)
            saved_alerts = alerts
        await asyncio.sleep(random.randrange(100, 200))


async def check_new_articles():
    saved_articles = []
    with open(fr'{cwd}\chats.txt', 'r', encoding='UTF-8') as file:
        chats = file.readlines()

    while True:
        print('–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π... - ', time.strftime("%d/%m/%Y %H:%M:%S"))
        await get_articles()
        with open(rf'{cwd}\src\articles.json', 'r', encoding='UTF-8') as file:
            got_articles = json.load(file)
        saved_articles_names = [i['Title'] for i in saved_articles]
        got_articles_names = [i['Title'] for i in got_articles]

        if not saved_articles:
            saved_articles = got_articles
            print('–ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ - ', time.strftime("%d/%m/%Y %H:%M:%S"))
        elif all(get in saved_articles_names for get in got_articles_names):
            print("–ù–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ - ", time.strftime("%d/%m/%Y %H:%M:%S"))
        else:
            print("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ - ", time.strftime("%d/%m/%Y %H:%M:%S"))
            new_articles = [get for get in got_articles if get not in saved_articles]
            saved_articles = got_articles
            for chat in chats:
                for article in new_articles:
                    try:
                        await bot.send_photo(chat, article['Photo'])
                    except:
                        print('–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –Ω–µ —É–¥–∞–ª–∞—Å—å')
                    link = hlink('–ü–æ–¥—Ä–æ–±–Ω–µ–µ', article['Read_More'])
                    message = f"‚ú®<b>{article['Title']}</b>‚ú®\n\nüìÉ {article['Description']}\n\nüìÖ {article['Date']}\t{link}"
                    await bot.send_message(chat, message, parse_mode="HTML", disable_web_page_preview=True)
            print(new_articles)
        await asyncio.sleep(random.randrange(60, 90))


async def get_relic_items():
    response = requests.get(config.RELICS_URL, headers=config.HEADERS).text
    soup = BeautifulSoup(response, 'lxml')
    table = soup.find(class_="wikitable")
    rows = table.find_all('tr')
    write_list = []
    lith = []
    meso = []
    neo = []
    axi = []
    relic_switch = {
        0: lith,
        1: meso,
        2: neo,
        3: axi,
    }
    for row in rows:
        count = 0
        columns = row.find_all(['th', 'td'])[:-1]
        for column in columns:
            if column.text != '' and column.text not in relic_switch[count]:
                try:
                    relic_switch[count].append({'name': column.text,
                                                'link': 'https://warframe.fandom.com' +
                                                column.find('a', href=True)['href']})

                except:
                    relic_switch[count].append({'name': column.text, 'link': ''})
            else:
                relic_switch[count].append({'name': ''})
            count += 1
        write_list.append((lith[-1], meso[-1], neo[-1], axi[-1]))
    with open(fr'{cwd}\relics_table.csv', 'w', encoding='UTF-8') as file:
        writer = csv.writer(file)
        writer.writerows(write_list)


@dp.message_handler(commands=['start'])
async def process_start_command(msg: types.Message):
    await msg.reply("ü§ñ –ü—Ä–∏–≤–µ—Ç, –Ø - –û—Ä–¥–∏—Å, –±–æ—Ç - –∏–Ω—Ñ–æ—Ä–º–∞—Ç–æ—Ä –∏–≤–µ–Ω—Ç–æ–≤ Warframe'a \n\n" +
                    "üîî –í–æ—Ç —Å–ø–∏—Å–æ–∫ –º–æ–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: \n\n" +
                    " - –Ø –±—É–¥—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ —Å –æ—Ñ. —Å–∞–π—Ç–∞ \n" +
                    " - –ú–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –¥—Ä–æ–ø —Å –ª—é–±–æ–π —Ä–µ–ª–∏–∫–≤–∏–∏ \n" +
                    " - –û—Ç–∫—É–¥–∞ –≤—ã–ø–∞–¥–∞—é—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∞–π–º —á–∞—Å—Ç–∏ \n" +
                    " - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â—É—é –≤—ã–ª–∞–∑–∫—É –∏ —Å—Ç–∞—Ç—É—Å—ã –æ—Ç–∫—Ä—ã—Ç—ã—Ö –º–∏—Ä–æ–≤ \n\n" +
                    "‚Åâ –í—Å–µ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –ø–æ –∫–æ–º–∞–Ω–¥–µ /help", parse_mode="Markdown",
                    reply_markup=kb.mainMenu)

    chat_id = str(msg.chat.id)
    with open(fr'{cwd}\chats.txt', 'r', encoding='UTF-8') as file:
        chat_id_list = file.readline()
        if chat_id not in chat_id_list:
            with open(fr'{cwd}\chats.txt', 'a', encoding='UTF-8') as write_file:
                write_file.write(chat_id)
                write_file.write('\n')
        else:
            print('–≠—Ç–æ—Ç –∞–π–¥–∏ —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ')


@dp.message_handler(commands=['help'])
async def process_help_command(msg: types.Message):
    await msg.reply("‚Åâ –ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –±–æ—Ç–∞ \n\n" +
                    "- /latest - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–æ–≤–æ—Å—Ç—å —Å –æ—Ñ. —Å–∞–π—Ç–∞ \n" +
                    "- üåó–¶–∏–∫–ª—ã - —É–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö –º–∏—Ä–æ–≤ \n" +
                    "- üõ°–í—ã–ª–∞–∑–∫–∞ - —É–∑–Ω–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤—ã–ª–∞–∑–∫–∏, –≤–∫–ª—é—á–∞—è –º–∏—Å—Å–∏–∏ –∏ –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è \n\n" +
                    "- –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥—Ä–æ–ø —Å —Ä–µ–ª–∏–∫–≤–∏–∏ - {–≠—Ä–∞} {–ù–∞–∑–≤–∞–Ω–∏–µ} {–£–ª—É—á—à–µ–Ω–∏–µ –æ—Ç 0 –¥–æ 3 (–Ω–µ –æ–±—è–∑.)}\n" +
                    "_–ù–∞–ø—Ä–∏–º–µ—Ä:_ *–õ–∏—Ç k7* –∏–ª–∏ *lith k7*\n\n" +
                    "- –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å –∫–∞–∫–∏—Ö —Ä–µ–ª–∏–∫–≤–∏–π –ø–∞–¥–∞–µ—Ç —á–∞—Å—Ç—å - {–ù–∞–∑–≤–∞–Ω–∏–µ}\n" +
                    "_–ù–∞–ø—Ä–∏–º–µ—Ä:_ *–†–∏–Ω–æ –ü—Ä–∞–π–º* –∏–ª–∏ *Rhino Prime*\n\n" +
                    "- –ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —á–∞—Å—Ç–∏ - {–ù–∞–∑–≤–∞–Ω–∏–µ} –ü—Ä–∞–π–º {–ß–∞—Å—Ç—å}\n" +
                    "_–ù–∞–ø—Ä–∏–º–µ—Ä:_ *–†–∏–Ω–æ –ü—Ä–∞–π–º –ß–µ—Ä—Ç—ë–∂* –∏–ª–∏ *Rhino Prime Blueprint*\n\n" +
                    "üìå *–í–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:* –ù–µ –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫, –ø–æ—ç—Ç–æ–º—É,\n" +
                    "–µ—Å–ª–∏ –±–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç - —Ç–æ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º\n" +
                    "–í –±—É–¥—É—â–µ–º –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã –±—É–¥—É—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã"
                    , parse_mode="Markdown", reply_markup=kb.mainMenu)


@dp.message_handler(commands=['latest'])
async def send_latest_article(msg: types.Message):
    await get_articles()
    with open(rf'{cwd}\src\articles.json', 'r', encoding='UTF-8') as file:
        article = json.load(file)[0]
    try:
        await bot.send_photo(msg.from_user.id, article['Photo'])

    except:
        print('–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –Ω–µ —É–¥–∞–ª–∞—Å—å')
    link = hlink('–ü–æ–¥—Ä–æ–±–Ω–µ–µ', article['Read_More'])
    message = f"‚ú® <b>{article['Title']}</b> ‚ú®\n\nüìÉ {article['Description']}\n\nüìÖ {article['Date']}\t{link}"
    await bot.send_message(msg.from_user.id, message, parse_mode="HTML", disable_web_page_preview=True,
                           reply_markup=kb.mainMenu)
    print(relic_names)


@dp.message_handler(commands=['list'])
async def send_articles(msg: types.Message):
    await get_articles()
    with open(rf'{cwd}\src\articles.json', 'r', encoding='UTF-8') as file:
        articles = json.load(file)

    for article in articles:
        try:
            await bot.send_photo(msg.from_user.id, article['Photo'])

        except:
            print('–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –Ω–µ —É–¥–∞–ª–∞—Å—å')
        message = f"‚ú® <b>{article['Title']}</b> ‚ú®\n\nüìÉ {article['Description']}\n\nüìÖ {article['Read_More']}\n{article['Date']}"
        await bot.send_message(msg.from_user.id, message, parse_mode="HTML", disable_web_page_preview=True,
                               reply_markup=kb.mainMenu)


@dp.message_handler(filters.Text("üåó World Cycles"))
async def world_cycles(msg: types.Message):
    print('–í—ã–≤–æ–¥ —Ü–∏–∫–ª–æ–≤')
    message = ""
    cycles = await get_cycles()
    for world in cycles:
        message += f"{world['name']}\n{bold('–°—Ç–∞—Ç—É—Å:')} {world['state']}\n{bold('–û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è:')} {reformat_time(world['timeLeft'])}\n\n"
    await bot.send_message(msg.from_user.id, message, parse_mode='Markdown', reply_markup=kb.mainMenu)


@dp.message_handler(filters.Text("üõ° Sortie"))
async def sortie_info(msg: types.Message):
    print('–í—ã–≤–æ–¥ –≤—ã–ª–∞–∑–∫–∏')
    message = ""
    sortie = await get_sortie()
    message += f"üé≠ *–§—Ä–∞–∫—Ü–∏—è:* {sortie['faction']}\n\n‚ò†Ô∏è *–ë–æ—Å—Å:* {sortie['boss']}\n\n‚è± *–û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è:* {reformat_time(sortie['timeLeft'])}\n\n"
    for num, mission in enumerate(sortie['missions']):
        message += f"*{num + 1}-—è –ú–∏—Å—Å–∏—è* - {mission['missionType']} - {mission['node']}\n*–ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä:* {mission['modifier']}\n\n"
    await bot.send_message(msg.from_user.id, message, parse_mode='Markdown', reply_markup=kb.mainMenu)


@dp.message_handler(filters.Text("‚öîÔ∏è Invasions"))
async def sortie_info(msg: types.Message):
    print('–í—ã–≤–æ–¥ –≤—Ç–æ—Ä–∂–µ–Ω–∏–π')
    invasions_list = read_cached_json('invasions')
    message = "‚öî*–í—Ç–æ—Ä–∂–µ–Ω–∏—è*\n\n"
    for invasion in invasions_list:
        message += f"*–ú–∏—Å—Å–∏—è:* {invasion['mission']}\n*–ó–∞—â–∏—Ç–∞*: {invasion['defendingFaction']} | *–ù–∞–≥—Ä–∞–¥–∞*: {invasion['defenderReward']}\n"
        message += f"*–ê—Ç–∞–∫–∞*: {invasion['attackingFaction']} | *–ù–∞–≥—Ä–∞–¥–∞*: {invasion['attackerReward']}\n"
        message += f"‚è±*–û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è:* {invasion['eta']}\n\n"
    await bot.send_message(msg.from_user.id, message, parse_mode='Markdown', reply_markup=kb.mainMenu)


# @dp.message_handler(Command(commands=['–°–∏–≥–Ω–∞–ª—ã'], prefixes='‚ùï'))
# async def sortie_info(msg: types.Message):
#     print(msg.text)
#     if msg.text == '‚ùï–°–∏–≥–Ω–∞–ª—ã –¢—Ä–µ–≤–æ–≥–∏':
#         print('–í—ã–≤–æ–¥ –°–∏–≥–Ω–∞–ª–æ–≤ –¢—Ä–µ–≤–æ–≥–∏')
#         alerts_list = read_cached_json('alerts')
#         if alerts_list:
#             message = "‚ùï*–°–∏–≥–Ω–∞–ª—ã –¢—Ä–µ–≤–æ–≥–∏*\n\n"
#             for alert in alerts_list:
#                 message += f"*–¢–∏–ø:* {alert['description']}\n*–ú–∏—Å—Å–∏—è*: {alert['mission']}\n*–§—Ä–∞–∫—Ü–∏—è*: {alert['faction']}\n"
#                 message += f"*–ù–∞–≥—Ä–∞–¥–∞*: {alert['reward']}\n"
#                 message += f"‚è±*–û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è:* {alert['eta']}\n\n"
#             await bot.send_message(msg.from_user.id, message, parse_mode='Markdown', reply_markup=kb.mainMenu)
#         else:
#             message = "‚ùó –°–∏–≥–Ω–∞–ª–æ–≤ –¢—Ä–µ–≤–æ–≥–∏ —Å–µ–π—á–∞—Å –Ω–µ—Ç."
#             await bot.send_message(msg.from_user.id, message, parse_mode='Markdown', reply_markup=kb.mainMenu)


@dp.message_handler()
async def relic_info(msg: types.Message):
    print('–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–ª–∏–∫–∞ –∏–ª–∏ –¥—Ä–æ–ø–∞ –≤—ã–∑–≤–∞–Ω–æ')
    command = msg.text.lower()
    split_command = command.split(' ')
    if split_command[0] in config.RELIC_COMMANDS:
        message = await get_relic_data(split_command)
        if message:
            await bot.send_message(msg.from_user.id, message, parse_mode='Markdown', reply_markup=kb.mainMenu)
        else:
            await bot.send_message(msg.from_user.id, '‚ùó –¢–∞–∫–æ–π —Ä–µ–ª–∏–∫–≤–∏–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è.',
                                   reply_markup=kb.mainMenu)
    else:
        message = await get_relics_with_current_item(command)
        try:
            if message:
                await bot.send_message(msg.from_user.id, message, parse_mode='Markdown', reply_markup=kb.mainMenu)
            else:
                await bot.send_message(msg.from_user.id, '‚ùó –¢–∞–∫–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è.',
                                       reply_markup=kb.mainMenu)
        except aiogram.utils.exceptions.MessageIsTooLong:
            await bot.send_message(msg.from_user.id, '‚ùó –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –∑–∞–ø—Ä–æ—Å. –£–∫–∞–∑—ã–≤–∞–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã.',
                                   reply_markup=kb.mainMenu)



async def async_tasks(*args):
    loop = asyncio.get_event_loop()
    loop.create_task(check_new_articles())
    loop.create_task(check_new_alerts())


def main():
    executor.start_polling(dp, skip_updates=True, on_startup=async_tasks)


if __name__ == '__main__':
    main()
